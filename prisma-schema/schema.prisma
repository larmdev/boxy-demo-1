generator client {
    provider = "prisma-client-js"
    output   = "./generated/prisma-client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    accountId    String        @id @default(uuid()) @db.VarChar(36)
    username     String        @db.VarChar(200)
    firstName    String?       @db.VarChar(200)
    lastName     String?       @db.VarChar(200)
    email        String?       @db.VarChar(200)
    faculty      String?       @db.VarChar(200)
    branch       String?       @db.VarChar(200)
    passwordHash String        @db.VarChar(200)
    passwordSalt String        @db.VarChar(45)
    role         String        @db.VarChar(45)
    isDelete     Boolean       @default(false)
    isActive     Boolean       @default(true)
    createdAt    DateTime      @default(now()) @db.DateTime(0)
    updatedAt    DateTime      @updatedAt @db.DateTime(0)
    Post         Post[]
    PostHistory  PostHistory[]
}

model Post {
    postId       String        @id @default(uuid()) @db.VarChar(36)
    accountId    String?       @db.VarChar(36)
    name         String        @db.VarChar(200)
    detail       String?       @db.VarChar(2000)
    point        Int?
    isDelete     Boolean       @default(false)
    isActive     Boolean       @default(true)
    createdAt    DateTime      @default(now()) @db.DateTime(0)
    updatedAt    DateTime      @updatedAt @db.DateTime(0)
    startDateBkk String?       @db.VarChar(100)
    startTimeBkk String?       @db.VarChar(100)
    endDateBkk   String?       @db.VarChar(100)
    endTimeBkk   String?       @db.VarChar(100)
    Type         String?       @db.VarChar(100)
    Limit        Int           @default(0)
    isLimit      Boolean       @default(false)
    startPostBkk Int?
    endPostBkk   Int?
    PostHistory  PostHistory[]
    Image        Image[]
    Account      Account?      @relation(fields: [accountId], references: [accountId])
}

model PostHistory {
    postHistoryId String   @id @default(uuid()) @db.VarChar(36)
    accountId     String?  @db.VarChar(36)
    postId        String?  @db.VarChar(36)
    isCancel      Boolean  @default(false)
    isActive      Boolean  @default(false)
    createdAt     DateTime @default(now()) @db.DateTime(0)
    updatedAt     DateTime @updatedAt @db.DateTime(0)
    Account       Account? @relation(fields: [accountId], references: [accountId])
    Post          Post?    @relation(fields: [postId], references: [postId])
}

model Image {
    imageId   String   @id @default(uuid()) @db.VarChar(36)
    postId    String   @db.VarChar(36)
    imageUrl  String   @db.VarChar(500)
    createdAt DateTime @default(now()) @db.DateTime(0)
    Post      Post     @relation(fields: [postId], references: [postId])
}
